/*
	GenCS VM Syntax
	peg.js
*/

program
= command+

/* spaces */
space = [ \n\b\t\r]+

ospace = space*

/* labels */
label = v:[aA-zZ_] w:labelend* {return v+w.join("");}

labelend
 = v:[aA-zZ_0-9]

/* numbers */
integer = digits
/ "-" d:digits {return -d;}
/ "+" d:digits {return d;}


digits
= digits:[0-9]+ { return parseInt(digits.join(""), 10); }

/* $command */
zero_param_command
= "halt"
/ "add"
/ "sub"
/ "mul"
/ "leq"
/ "return"

/* $command $number */
one_param_command
= "con"
/ "peek"
/ "poke"
/ "arg"

/* $command $label_rel|$number */
one_label_command
= "jp"
/ "cjp"

/* $command $label_abs|$number */
one_abs_label_command
= "call"

/* $command $label_rel|$number $number */
one_mixed_command
= "proc"

= c:instruction
/ ospace l:label ":" c:instruction
{
	c["label"] = l;
	return c;
}



instruction
= ospace c:one_param_command space i:integer ospace 
{
	return {"command": c, "params": {"type": "integer", "value": [i]}, "length": 2};
}

/ ospace c:zero_param_command ospace
{
	return {"command": c, "params": {"type": "integer", "value": []}, "length": 1};
}

/ ospace c:one_abs_label_command space l:label ospace 
{
	return {"command": c, "params": {"type": "labelabs", "value": [l]}, "length": 2}
}

/ ospace c:one_abs_label_command space i:integer ospace 
{
	return {"command": c, "params": {"type": "absolute", "value": [i]}, "length": 2}
}

/ ospace c:one_label_command space l:label ospace 
{
	return {"command": c, "params": {"type": "label", "value": [l]}, "length": 2}
}

/ ospace c:one_label_command space i:integer ospace 
{
	return {"command": c, "params": {"type": "relative", "value": [i]}, "length": 2}
}

/ ospace c:one_mixed_command space i:integer space j:integer 
{
	return {"command": c, "params": {"type": "relative2", "value": [i, j]}, "length": 3}
}

/ ospace c:one_mixed_command space i:integer space j:label 
{
	return {"command": c, "params": {"type": "label2", "value": [i, j]}, "length": 3}
}
